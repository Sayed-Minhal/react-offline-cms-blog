{"version":3,"sources":["Components/posts.js","Redux/Actions/action_types.js","Components/post.js","Redux/Actions/post_actions.js","Routes/routes.js","Redux/Reducers/post_reducers.js","App.js","serviceWorker.js","index.js"],"names":["Posts","postID","this","props","history","push","id","_this","react_default","a","createElement","posts","map","post","key","Card_default","style","margin","CardContent_default","Typography_default","variant","component","title","content","CardActions_default","Button_default","size","onClick","readPost","React","Component","PostList","connect","state","GET_POSTS","GET_POST","ADD_POST","REMOVE_POST","Post","index","console","log","dispatch","type","actionTypes","selected","textAlign","PostItem","AppRouter","BrowserRouter","Switch","Route","exact","path","render","routeParams","Components_post","match","params","initialState","store","createStore","arguments","length","undefined","action","Object","assign","concat","toConsumableArray","filter","item","applyMiddleware","thunkMiddleware","fetch","then","response","json","getState","subscribe","unsubscribe","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","setTimeout","es","routes","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c03939b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Posts extends React.Component {\r\n\r\n  readPost(postID) {\r\n    this.props.history.push('blogposts/' + postID.id);\r\n  }\r\n\r\n  render() {\r\n//    if (posts.length === 0) { return <h1 style={{ \"textAlign\": \"center\" }}>Loading....</h1> } else {\r\n      return (\r\n        <section>\r\n          {\r\n            this.props.posts.map(post => {\r\n              return (\r\n                <article key={post.id}>\r\n                  <Card style={{ \"margin\": \"0.5rem\" }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" component=\"h2\">\r\n                        {post.title}\r\n                      </Typography>\r\n                      <Typography component=\"p\">\r\n                        {post.content}\r\n                      </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                      <Button size=\"small\" onClick={() => this.readPost(post)}>Read full</Button>\r\n                    </CardActions>\r\n                  </Card>\r\n                </article>\r\n              )\r\n            })\r\n          }\r\n        </section>\r\n      )\r\n    }\r\n  }\r\n//}\r\n\r\nconst mapStateToProps = state => {\r\n  return { posts: state.posts };\r\n};\r\n\r\nconst PostList = connect(mapStateToProps)(Posts);\r\n\r\nexport default PostList;","export const GET_POSTS = 'GET_POSTS'\r\nexport const GET_POST = 'GET_POST'\r\nexport const GET_FIRST_POST = 'GET_FIRST_POSTS'\r\nexport const GET_LAST_POST = 'GET_LAST_POSTS'\r\nexport const ADD_POST = 'ADD_POST'\r\nexport const REMOVE_POST = 'REMOVE_POST'","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {getPost} from '../Redux/Actions/post_actions'\r\n\r\nclass Post extends React.Component {\r\n  componentDidMount(){\r\n   console.log(this.props);\r\n    this.props.dispatch(getPost(this.props.postID))\r\n  }\r\n\r\n  render() {\r\n    if (this.props.selected) {\r\n      return (\r\n        <article>\r\n          <h1>{this.props.selected.title}</h1>\r\n          <p>{this.props.selected.content}</p>\r\n        </article>\r\n      )\r\n    } else {\r\n      return <h1 style={{ \"textAlign\": \"center\" }}>loading...</h1>\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { posts: state.posts, selected:state.selected };\r\n};\r\n\r\nconst PostItem = connect(mapStateToProps)(Post);\r\n\r\nexport default PostItem;","import * as actionTypes from './action_types'\r\n\r\nexport function getPosts(posts){  \r\n    console.log(posts)  \r\n    return { type: actionTypes.GET_POSTS, posts:posts }\r\n}\r\n\r\nexport function getPost(index){\r\n    return { type:actionTypes.GET_POST, index }\r\n}\r\n\r\nexport function addPost(post){\r\n    return { type:actionTypes.ADD_POST, post }\r\n}\r\n\r\nexport function removePost(index){\r\n    return { type:actionTypes.REMOVE_POST, index }\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return dispatch => {\r\n      return fetch('http://localhost:1337/blogposts')\r\n        .then(response => response.json())\r\n        .then(json => dispatch(getPosts(json)))\r\n    }\r\n  }","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Posts from '../Components/posts'\r\nimport Post from '../Components/post'\r\n\r\n\r\nclass AppRouter extends React.Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Posts} />\r\n                    <Route path=\"/blogposts/:id\" render={(routeParams)=>{ return <Post postID={routeParams.match.params.id}/>}} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n            )\r\n    }\r\n}\r\n\r\nexport default AppRouter;","import * as actionTypes from '../Actions/action_types'\r\n\r\nconst initialState = {\r\n    posts: []\r\n  }\r\n\r\nexport default function boot(state=initialState, action) {\r\n    \r\n    switch (action.type) {\r\n        case actionTypes.GET_POSTS:\r\n        console.log(action);\r\n            return Object.assign({}, state, { \r\n                posts:state.posts.concat(action.posts)\r\n            })\r\n\r\n        case actionTypes.GET_POST:\r\n            console.log(action);\r\n                return Object.assign({}, state, { \r\n                    posts: state.posts,\r\n                    selected:state.posts[action.index-1]\r\n                })\r\n          \r\n        \r\n        case actionTypes.ADD_POST:\r\n          return Object.assign({}, state, {\r\n            posts: [\r\n              ...state.posts,\r\n              action.post\r\n            ]\r\n          })\r\n          \r\n\r\n        case actionTypes.REMOVE_POST:\r\n          return Object.assign({}, state, {\r\n            posts: (()=>state.posts.filter((item, index) => index !== action.index-1))()\r\n          })\r\n        \r\n        default:\r\n          return state\r\n      }\r\n  }","import React from 'react';\nimport AppRouter from './Routes/routes'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware  } from 'redux'\nimport { Provider} from \"react-redux\"\n\nimport boot from './Redux/Reducers/post_reducers'\nimport * as actions from './Redux/Actions/post_actions'\n\nconst store = createStore(boot,applyMiddleware(thunkMiddleware))\n\nstore.dispatch(actions.fetchPosts()).then(() => console.log(store.getState()))\n\nconst unsubscribe = store.subscribe(() => console.log(store.getState()))\n\nunsubscribe();\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    window.setTimeout(()=>console.log(store.getState()),1400);\n\n  }\n  render() {\n    return (\n      <Provider store={store}><AppRouter /></Provider>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register()\n"],"sourceRoot":""}